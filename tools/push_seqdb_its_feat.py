'''
Created on Mar 5, 2015

@author: korolo
'''
import sys
import getopt
import logging.config
import requests.exceptions
import tools_helper
from api.seqdbWebService import seqdbWebService, UnexpectedContent
from config import config_root
#from unittest.test.support import LoggingResult


usage_help_line = """Usage of the script: \npush_seqdb_its_seqs -c <Path to yaml config with SeqDB API info> -f <features file name>
or
push_seqdb_its_seqs -k <SeqDB API key> -u <SeqDB API URL>  -f <features file name>
Other arguments:
   -h   help (prints this message)
"""

log_file_name = "seqdb_push.log"
user_log = tools_helper.SimpleLog(log_file_name)
log_fail_msg = "%s '%s'" %(tools_helper.log_msg_errorSeeLog, log_file_name)

# The name of the feature type for each itsx feature
its_feature_type_name = "misc_RNA"
rRna_feature_type_name = "rRNA"
feature_description = "Generated by ITSx tool."
output_file_name = 'seqdb_feature_ids.txt'
input_file_line_example = "seqdb|1685    321 bp.    SSU: 1-46    ITS1: 47-283    5.8S: No end    ITS2: Not found    LSU: Not found    Broken or partial sequence, only partial 5.8S!"



def parse_input_args(argv):
    ''' Parses command line arguments
    Returns:
        features_file_name: name of the file that contains ITS features to be pushed to SeqDB
        config_file: path to a config file with has api information, 
            or empty string if no such usage 
        seqdb api_key to use for web services requests
        seqdb api_url to use for web services requests
    '''
    config_file=''
    api_url=''
    api_key = ''
    features_file_name = ''
    
    
    try:
        opts, args = getopt.getopt(argv,"hc:f:k:u:",["config_file=", "seqdb_api_key=", "seqdb_api_url=", "features_file="])
    except getopt.GetoptError:
        print usage_help_line
        logging.error(tools_helper.log_msg_argError)
        user_log.error(tools_helper.log_msg_argError)
        sys.exit(tools_helper.log_msg_sysExit)
        
        
    if len(opts)==0:
        print usage_help_line
        sys.exit(2)
    
    for opt, arg in opts:
        if opt == '-h':
            print usage_help_line
            sys.exit()
        elif opt in ("-f", "--features_file"):
            features_file_name = arg
        elif opt in ("-c", "--config_file="):
            config_file = arg
        elif opt in ("-k", "--seqdb_api_key"):
            api_key = arg
        elif opt in ("-u", "--seqdb_api_url="):
            api_url = arg
            
            
    if config_file and api_key and api_url:
        print(tools_helper.log_msg_argErrorConfigFileUrl)
        print(usage_help_line)
        logging.error(tools_helper.log_msg_argError)
        user_log.error(tools_helper.log_msg_argError)
        sys.exit(2)
    
    if bool(api_key) != bool(api_url):
        print(tools_helper.log_msg_argErrorKeyUrl)
        print(usage_help_line)
        logging.error(tools_helper.log_msg_argError)
        user_log.error(tools_helper.log_msg_argError)
        sys.exit(2)
    
            
            
    return (features_file_name, config_file, api_url, api_key)




# B15_17_SH817_ITS_ITS5    622 bp.    SSU: Not found    ITS1: 1-241    5.8S: 242-399    ITS2: 400-557    LSU: 558-622
def push_its_features(api_key, features_file_name, base_url):
    
    created_feature_ids = []
    
    # Open an ITSx positions file
    feat_file = ''
    try:
        feat_file = open(features_file_name,"r")
    except IOError as e:
        if e.errno == 2:
            error_msg = "Could not open ITSx feature positions file '%s'." % features_file_name
            user_log.error(error_msg)
            logging.error(error_msg)
            logging.error(e.message)
            sys.exit(tools_helper.log_msg_sysExit)
        else:
            raise
    
    seqdbWS = seqdbWebService(api_key, base_url)
    
    # Get all feature types from seqDB
    seqdb_feat_types = seqdbWS.getFeatureTypesWithIds()
    
    its_feature_type_id = ''
    rRna_feature_type_id = ''
    # Create feature type in SeqDB, if don't exist already
    if its_feature_type_name not in seqdb_feat_types:
        its_feature_type_id = seqdbWS.createFeatureType(its_feature_type_name)
    else:
        its_feature_type_id = seqdb_feat_types[its_feature_type_name]
        
    if rRna_feature_type_name not in seqdb_feat_types:
        rRna_feature_type_id = seqdbWS.createFeatureType(rRna_feature_type_name)
    else:
        rRna_feature_type_id = seqdb_feat_types[rRna_feature_type_name]
    
            
    ### TODO: Finalize what to use for the frame: and strand:
    ###        (using default 1 and 1 for now)
    
    # parse the file and insert each found feature to SeqDB
    for line in feat_file:
        line_tokens = line.split('\t')

        try:
            sequenceId = line_tokens[0].split('|')[1]
            sequenceId = int(sequenceId)
        except:
            error_msg = "Could not extract sequence id from the input file. Example of an expected line:\n%s\n" % input_file_line_example
            user_log.error(error_msg)
            logging.error(error_msg)
            print log_fail_msg
            sys.exit(tools_helper.log_msg_sysExit)
        
        try:
            itsx_features = line_tokens[2:7]
        except IndexError as e:
            logging.error("Could not extract ITS features from the input file. Example of an expected line:\n%s\n" % input_file_line_example)
            logging.error(e.message)
            print log_fail_msg
            sys.exit(tools_helper.log_msg_sysExit)
        
        if not sequenceId or not itsx_features:
            logging.error("Input file not in the correct format. Example of an expected line:\n%s\n" % input_file_line_example)
            print log_fail_msg
            sys.exit(tools_helper.log_msg_sysExit)
            
                
        for itsx_feature_token in itsx_features:
            feature_location_pair = itsx_feature_token.split(": ")
            try:
                location = feature_location_pair[1].split("-")
                location = map(int, location)
                location = [{"start":location[0],"end":location[1],"frame":1,"strand":1}]
                feature_type_id = its_feature_type_id
                if feature_location_pair[0] in {"SSU", "5.8S", "LSU"}:
                    feature_type_id = rRna_feature_type_id
                fid = seqdbWS.insertFeature(feature_location_pair[0], feature_type_id, location, sequenceId, description=feature_description)
                created_feature_ids.append(fid)
            except requests.exceptions.ConnectionError as e:
                user_log.error("%s %s" % (tools_helper.log_msg_noDbConnection, tools_helper.log_msg_sysAdmin))
                logging.error(tools_helper.log_msg_noDbConnection)
                logging.error(e.message)
                sys.exit(tools_helper.log_msg_sysExit)
            except requests.exceptions.HTTPError as e:
                user_log.error("%s %s" % (tools_helper.log_msg_httpError, tools_helper.log_msg_sysAdmin))
                logging.error(tools_helper.log_msg_httpError)
                logging.error(e.message)
                sys.exit(tools_helper.log_msg_sysExit)
            except UnexpectedContent as e:
                user_log.error("%s %s" % (tools_helper.log_msg_apiResponseFormat, tools_helper.log_msg_sysAdmin))
                logging.error(tools_helper.log_msg_apiResponseFormat)
                logging.error(e.message)
                sys.exit(tools_helper.log_msg_sysExit)
            except:
                warning_msg = "File token '%s' is not in the expected format of <feature name>:<position>. Ignoring." % itsx_feature_token
                user_log.warn(warning_msg)
                logging.warning(warning_msg)


    # Write ids of the inserted features into a file
    output_file = open(output_file_name, 'w')
    for fid in created_feature_ids:
        output_file.write(str(fid) + '\n')
    output_file.close()
  
    log_msg1 = "Number of features written to Sequence Dababase:   %i " % len(created_feature_ids)
    log_msg2 = "Created feature ids are written to a file: '%s'" % output_file_name
    logging.info(log_msg1)  
    logging.info(log_msg2)
    user_log.info(log_msg1)  
    user_log.info(log_msg2)
        
    return created_feature_ids

    
def main():
    ''' Writes ITS features to SeqDB '''
    
    main_conf = tools_helper.load_config(config_root.path() + '/config.yaml')

    if not main_conf:
        logging.error(tools_helper.log_msg_noConfig)
        sys.exit(tools_helper.log_msg_sysExit)
    
    logging.config.dictConfig(main_conf['logging'])

    logging.info("Script executed with the following command and arguments: %s" % sys.argv)
    user_log.info(tools_helper.log_msg_execStarted_simple)
    
    features_file_name, config_file, api_url, api_key = parse_input_args(sys.argv[1:])
    
    if config_file:
        tool_config = tools_helper.load_config(config_file)
        api_url = tool_config['seqdb']['api_url'] 
        api_key = tool_config['seqdb']['api_key'] 
    
    
    logging.info("%s '%s'" %  (tools_helper.log_msg_apiUrl, api_url))
    user_log.info("%s '%s'" %  (tools_helper.log_msg_apiUrl, api_url))

    log_msg = "File name with features: %s" % features_file_name
    logging.info(log_msg)    
    user_log.info(log_msg)

    
    success_feat_ids = push_its_features(api_key, features_file_name, api_url)
    
    
    print(tools_helper.log_msg_execEnded)
    print("Number of features written to Sequence Dababase:   %i " % len(success_feat_ids))  
    print("Created feature ids are written to a file: '%s'" % output_file_name)
    print("Execution log is written to a file: '%s'" % log_file_name)
    
    user_log.info(tools_helper.log_msg_execEnded)
    user_log.close()
    
    logging.info(tools_helper.log_msg_execEnded)



if __name__ == '__main__':
    main()
